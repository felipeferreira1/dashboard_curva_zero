)
}
# Define UI for application
ui <- fluidPage(
h1("Curva Zero"),
selectInput(inputId = "datas",
label = "escolha uma data",
choices = datas_tratadas,
multiple = T),
selectInput(inputId = "dados",
label = "escolha um tipo de dado",
choices = c("nominal" = "nominal",
"real" = "real",
"implicita" = "implicita")),
plotOutput("plot")
# dataTableOutput("table")
# textOutput("text")
)
# Run the application
shinyApp(ui = ui, server = server)
rsconnect
install.packages('rsconnect')
rsconnect::setAccountInfo(name='felipeferreira',
token='634B3CF68C3B61180A22E5C29DC1D7AC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='felipeferreira',
token='634B3CF68C3B61180A22E5C29DC1D7AC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='felipeferreira', token='634B3CF68C3B61180A22E5C29DC1D7AC', secret='hYFpd3b4fF+Yg0VJvziwazKRoL7bSe76k5tHmltf')
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?pivot_wider
fish_encounters
fish_encounters %>%
pivot_wider(names_from = station, values_from = seen)
# Fill in missing values
fish_encounters %>%
pivot_wider(names_from = station, values_from = seen, values_fill = 0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
resposta_dados = "real"
resposta_data = "2021-05-28"
as.data.frame(dados_lista[[resposta_dados()]]) %>%
dplyr::filter(data == resposta_data)
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data)
resposta_data = c("2021-05-28", "2021-05-21")
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data)
View(`2021-05-21`)
View(`2021-05-28`)
as.data.frame(dados_lista[[resposta_dados]])
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data)
resposta_data = "2021-05-28"
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data)
resposta_data = c("2021-05-28", "2021-05-21")
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data)
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data, preserve = T)
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data, preserve == T)
as.data.frame(dados_lista[[resposta_dados]]) %>%
dplyr::filter(data == resposta_data, .preserve = T)
a = as.data.frame(dados_lista[[resposta_dados]])
View(a)
as.data.frame(dados_lista[[resposta_dados]]) %>%
subset(data == resposta_data)
b = as.data.frame(dados_lista[[resposta_dados]]) %>%
subset(data == resposta_data)
View(b)
b = as.data.frame(dados_lista[[resposta_dados]]) %>% setDT()[data == resposta_data]
b = as.data.frame(dados_lista[[resposta_dados]]) %>% setDT()[data == resposta_data]
b = as.data.frame(dados_lista[[resposta_dados]]) %>% setDT()[data == list(resposta_data)]
list(resposta_data)
b = as.data.frame(dados_lista[[resposta_dados]])[as.data.frame(dados_lista[[resposta_dados]])$data %in% resposta]
b = as.data.frame(dados_lista[[resposta_dados]])[as.data.frame(dados_lista[[resposta_dados]])$data %in% resposta_data]
b = as.data.frame(dados_lista[[resposta_dados]])[as.data.frame(dados_lista[[resposta_dados]])$data %in% resposta_data]
b = as.data.frame(dados_lista[[resposta_dados]])
b[b$data %in% resposta_data]
b[b$data %in% resposta_data,]
as.data.frame(dados_lista[[resposta_dados]])[as.data.frame(dados_lista[[resposta_dados]])$data %in% resposta_data,]
runApp()
?order
runApp()
runApp()
runApp()
?pivot_wider
runApp()
runApp()
?reorder
runApp()
shiny::runApp()
View(dados_nominal)
View(dados_real)
View(`2021-05-28`)
View(`2021-05-21`)
View(`2021-05-14`)
View(dados_real)
?reactive
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?write.csv2
runApp()
runApp()
runApp()
runApp()
runApp()
?scale_x_discrete
runApp()
runApp()
seq(0.5,10.5,0.5)
seq(0.5, 10.5, 0.5)
runApp()
runApp()
runApp()
#Script para dados da curva zero
#Feito por: Felipe Simplício Ferreira
#última atualização: 25/05/2021
##Carregando pacotes que serão utilizados
library(tidyverse)
library(rio)
library(openxlsx)
#library(shiny)
library(ggrepel)
library(scales)
##Definindo caminho
setwd("D:/Documentos/GitHub/dashboard_curva_zero")
#Importando planilha
#Definindo as datas
datas <- import("curva_zero.xlsx", col_names = F)
datas <- datas[1,]
seleciona_datas <- seq(2,length(datas), 8)
datas_tratadas <- NA
for (i in 1:length(seleciona_datas)){
datas_tratadas[i] <- datas[1,seleciona_datas[i]]
}
datas_tratadas <- as.vector(as.character((convertToDate(datas_tratadas))))
#Coletando o resto dos dados
dados <- import("curva_zero.xlsx", skip = 5, col_names = F)
seleciona_dados <- seq(1,length(dados), 8)
for (i in 1:length(datas_tratadas)){
dados_dia <- dados[0:22,seleciona_dados[i]:(seleciona_dados[i]+4)]
names(dados_dia) <- dados_dia[1,]
dados_dia <- dados_dia[-1,] %>% mutate_all(function(x) as.numeric(as.character(x))) %>%
as.data.frame() %>% drop_na()
names(dados_dia) <- c("anos", "vertices", "real", "nominal", "implícita")
nome_arquivo <- as.character(datas_tratadas[i])
assign(nome_arquivo, dados_dia) #Nomeando arquivos
print(paste(i, length(datas_tratadas), sep = '/')) #Printa o progresso da repetição
}
#Selecionando data
usuario_data <- function(){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
opcoes_dados <- c("nominal", "real", "implícita")
while(is.element(resposta_dados, opcoes_dados) == F){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
}
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data, datas_tratadas) == F){
print(datas_tratadas)
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
graf <- ggplot(dado_graf, aes(x = anos, y = get(!!resposta_data), label = sprintf("%0.2f", round(dado_graf[,2],2)))) +
geom_line() + geom_label_repel() +
scale_x_continuous(breaks = round(seq(min(dado_graf$anos), max(dado_graf$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf[,2]), max(dado_graf[,2]), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1)) +
labs(title = paste("Curva zero", resposta_data, sep = " "), subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
show(graf)
for (i in 1:length(datas_tratadas)){
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data_nova, datas_tratadas) == F){
print(datas_tratadas)
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- merge(dado_graf, select(get(resposta_data_nova), anos, resposta_dados), by = "anos", all = T) %>%
rename(!!resposta_data_nova := resposta_dados)
dado_graf_mult <- dado_graf %>% na.omit() %>% pivot_longer(-1)
graf <- ggplot(dado_graf_mult, aes(x = anos, y = value, colour = name, label = sprintf("%0.2f", round(value,2)))) +
geom_line() + geom_label_repel() +
scale_x_continuous(breaks = round(seq(min(dado_graf_mult$anos), max(dado_graf_mult$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf_mult$value), max(dado_graf_mult$value), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position = "bottom") +
scale_colour_discrete(name = "Datas") +
labs(title = "Curva zero", subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
show(graf)
}
}
usuario_data()
library(plotly)
library(plotly)
install.packages(plotly)
install.packages("plotly")
library(plotly)
##Definindo caminho
setwd("D:/Documentos/GitHub/dashboard_curva_zero")
#Importando planilha
#Definindo as datas
datas <- import("curva_zero.xlsx", col_names = F)
datas <- datas[1,]
seleciona_datas <- seq(2,length(datas), 8)
datas_tratadas <- NA
for (i in 1:length(seleciona_datas)){
datas_tratadas[i] <- datas[1,seleciona_datas[i]]
}
datas_tratadas <- as.vector(as.character((convertToDate(datas_tratadas))))
#Coletando o resto dos dados
dados <- import("curva_zero.xlsx", skip = 5, col_names = F)
seleciona_dados <- seq(1,length(dados), 8)
for (i in 1:length(datas_tratadas)){
dados_dia <- dados[0:22,seleciona_dados[i]:(seleciona_dados[i]+4)]
names(dados_dia) <- dados_dia[1,]
dados_dia <- dados_dia[-1,] %>% mutate_all(function(x) as.numeric(as.character(x))) %>%
as.data.frame() %>% drop_na()
names(dados_dia) <- c("anos", "vertices", "real", "nominal", "implícita")
nome_arquivo <- as.character(datas_tratadas[i])
assign(nome_arquivo, dados_dia) #Nomeando arquivos
print(paste(i, length(datas_tratadas), sep = '/')) #Printa o progresso da repetição
}
#Script para dados da curva zero
#Feito por: Felipe Simplício Ferreira
#última atualização: 25/05/2021
##Carregando pacotes que serão utilizados
library(tidyverse)
library(rio)
library(openxlsx)
#library(shiny)
library(ggrepel)
library(scales)
library(plotly)
##Definindo caminho
setwd("D:/Documentos/GitHub/dashboard_curva_zero")
#Importando planilha
#Definindo as datas
datas <- import("curva_zero.xlsx", col_names = F)
datas <- datas[1,]
seleciona_datas <- seq(2,length(datas), 8)
datas_tratadas <- NA
for (i in 1:length(seleciona_datas)){
datas_tratadas[i] <- datas[1,seleciona_datas[i]]
}
datas_tratadas <- as.vector(as.character((convertToDate(datas_tratadas))))
#Coletando o resto dos dados
dados <- import("curva_zero.xlsx", skip = 5, col_names = F)
seleciona_dados <- seq(1,length(dados), 8)
for (i in 1:length(datas_tratadas)){
dados_dia <- dados[0:22,seleciona_dados[i]:(seleciona_dados[i]+4)]
names(dados_dia) <- dados_dia[1,]
dados_dia <- dados_dia[-1,] %>% mutate_all(function(x) as.numeric(as.character(x))) %>%
as.data.frame() %>% drop_na()
names(dados_dia) <- c("anos", "vertices", "real", "nominal", "implícita")
nome_arquivo <- as.character(datas_tratadas[i])
assign(nome_arquivo, dados_dia) #Nomeando arquivos
print(paste(i, length(datas_tratadas), sep = '/')) #Printa o progresso da repetição
}
#Selecionando data
usuario_data <- function(){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
opcoes_dados <- c("nominal", "real", "implícita")
while(is.element(resposta_dados, opcoes_dados) == F){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
}
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data, datas_tratadas) == F){
print(datas_tratadas)
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
graf <- ggplot(dado_graf, aes(x = anos, y = get(!!resposta_data), label = sprintf("%0.2f", round(dado_graf[,2],2)))) +
geom_line() + geom_label_repel() +
scale_x_continuous(breaks = round(seq(min(dado_graf$anos), max(dado_graf$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf[,2]), max(dado_graf[,2]), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1)) +
labs(title = paste("Curva zero", resposta_data, sep = " "), subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
show(graf)
for (i in 1:length(datas_tratadas)){
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data_nova, datas_tratadas) == F){
print(datas_tratadas)
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- merge(dado_graf, select(get(resposta_data_nova), anos, resposta_dados), by = "anos", all = T) %>%
rename(!!resposta_data_nova := resposta_dados)
dado_graf_mult <- dado_graf %>% na.omit() %>% pivot_longer(-1)
graf <- ggplot(dado_graf_mult, aes(x = anos, y = value, colour = name, label = sprintf("%0.2f", round(value,2)))) +
geom_line() + geom_label_repel() +
scale_x_continuous(breaks = round(seq(min(dado_graf_mult$anos), max(dado_graf_mult$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf_mult$value), max(dado_graf_mult$value), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position = "bottom") +
scale_colour_discrete(name = "Datas") +
labs(title = "Curva zero", subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
show(graf)
}
}
usuario_data <- function(){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
opcoes_dados <- c("nominal", "real", "implícita")
while(is.element(resposta_dados, opcoes_dados) == F){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
}
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data, datas_tratadas) == F){
print(datas_tratadas)
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
graf <- ggplot(dado_graf, aes(x = anos, y = get(!!resposta_data), label = sprintf("%0.2f", round(dado_graf[,2],2)))) +
geom_line() + geom_label_repel() +
scale_x_continuous(breaks = round(seq(min(dado_graf$anos), max(dado_graf$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf[,2]), max(dado_graf[,2]), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1)) +
labs(title = paste("Curva zero", resposta_data, sep = " "), subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
# show(graf)
show(ggplotly(graf))
for (i in 1:length(datas_tratadas)){
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data_nova, datas_tratadas) == F){
print(datas_tratadas)
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- merge(dado_graf, select(get(resposta_data_nova), anos, resposta_dados), by = "anos", all = T) %>%
rename(!!resposta_data_nova := resposta_dados)
dado_graf_mult <- dado_graf %>% na.omit() %>% pivot_longer(-1)
graf <- ggplot(dado_graf_mult, aes(x = anos, y = value, colour = name, label = sprintf("%0.2f", round(value,2)))) +
geom_line() + geom_label_repel() +
scale_x_continuous(breaks = round(seq(min(dado_graf_mult$anos), max(dado_graf_mult$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf_mult$value), max(dado_graf_mult$value), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position = "bottom") +
scale_colour_discrete(name = "Datas") +
labs(title = "Curva zero", subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
# show(graf)
show(ggplotly(graf))
}
}
usuario_data()
?ggplotly
usuario_data()
#Selecionando data
usuario_data <- function(){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
opcoes_dados <- c("nominal", "real", "implícita")
while(is.element(resposta_dados, opcoes_dados) == F){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
}
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data, datas_tratadas) == F){
print(datas_tratadas)
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
graf <- ggplot(dado_graf, aes(x = anos, y = get(!!resposta_data), label = sprintf("%0.2f", round(dado_graf[,2],2)))) +
geom_line() + geom_label_repel() +  geo_point() +
scale_x_continuous(breaks = round(seq(min(dado_graf$anos), max(dado_graf$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf[,2]), max(dado_graf[,2]), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1)) +
labs(title = paste("Curva zero", resposta_data, sep = " "), subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
# show(graf)
show(ggplotly(graf))
for (i in 1:length(datas_tratadas)){
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data_nova, datas_tratadas) == F){
print(datas_tratadas)
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- merge(dado_graf, select(get(resposta_data_nova), anos, resposta_dados), by = "anos", all = T) %>%
rename(!!resposta_data_nova := resposta_dados)
dado_graf_mult <- dado_graf %>% na.omit() %>% pivot_longer(-1)
graf <- ggplot(dado_graf_mult, aes(x = anos, y = value, colour = name, label = sprintf("%0.2f", round(value,2)))) +
geom_line() + geom_label_repel() + geo_point() +
scale_x_continuous(breaks = round(seq(min(dado_graf_mult$anos), max(dado_graf_mult$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf_mult$value), max(dado_graf_mult$value), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position = "bottom") +
scale_colour_discrete(name = "Datas") +
labs(title = "Curva zero", subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
# show(graf)
show(ggplotly(graf))
}
}
usuario_data()
#Selecionando data
usuario_data <- function(){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
opcoes_dados <- c("nominal", "real", "implícita")
while(is.element(resposta_dados, opcoes_dados) == F){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
}
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data, datas_tratadas) == F){
print(datas_tratadas)
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
graf <- ggplot(dado_graf, aes(x = anos, y = get(!!resposta_data), label = sprintf("%0.2f", round(dado_graf[,2],2)))) +
geom_line() + geom_label_repel() +  geom_point() +
scale_x_continuous(breaks = round(seq(min(dado_graf$anos), max(dado_graf$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf[,2]), max(dado_graf[,2]), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1)) +
labs(title = paste("Curva zero", resposta_data, sep = " "), subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
# show(graf)
show(ggplotly(graf))
for (i in 1:length(datas_tratadas)){
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data_nova, datas_tratadas) == F){
print(datas_tratadas)
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- merge(dado_graf, select(get(resposta_data_nova), anos, resposta_dados), by = "anos", all = T) %>%
rename(!!resposta_data_nova := resposta_dados)
dado_graf_mult <- dado_graf %>% na.omit() %>% pivot_longer(-1)
graf <- ggplot(dado_graf_mult, aes(x = anos, y = value, colour = name, label = sprintf("%0.2f", round(value,2)))) +
geom_line() + geom_label_repel() + geom_point() +
scale_x_continuous(breaks = round(seq(min(dado_graf_mult$anos), max(dado_graf_mult$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf_mult$value), max(dado_graf_mult$value), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position = "bottom") +
scale_colour_discrete(name = "Datas") +
labs(title = "Curva zero", subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
# show(graf)
show(ggplotly(graf))
}
}
usuario_data()
?style
#Selecionando data
usuario_data <- function(){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
opcoes_dados <- c("nominal", "real", "implícita")
while(is.element(resposta_dados, opcoes_dados) == F){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
}
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data, datas_tratadas) == F){
print(datas_tratadas)
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
graf <- ggplot(dado_graf, aes(x = anos, y = get(!!resposta_data), label = sprintf("%0.2f", round(dado_graf[,2],2)))) +
geom_line() + geom_point() +
scale_x_continuous(breaks = round(seq(min(dado_graf$anos), max(dado_graf$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf[,2]), max(dado_graf[,2]), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1)) +
labs(title = paste("Curva zero", resposta_data, sep = " "), subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
# show(graf)
graf <- graf %>% ggplotly() %>% style(hoverinfo = "y")
show(graf)
for (i in 1:length(datas_tratadas)){
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data_nova, datas_tratadas) == F){
print(datas_tratadas)
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- merge(dado_graf, select(get(resposta_data_nova), anos, resposta_dados), by = "anos", all = T) %>%
rename(!!resposta_data_nova := resposta_dados)
dado_graf_mult <- dado_graf %>% na.omit() %>% pivot_longer(-1)
graf <- ggplot(dado_graf_mult, aes(x = anos, y = value, colour = name, label = sprintf("%0.2f", round(value,2)))) +
geom_line() + geom_point() +
scale_x_continuous(breaks = round(seq(min(dado_graf_mult$anos), max(dado_graf_mult$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf_mult$value), max(dado_graf_mult$value), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position = "bottom") +
scale_colour_discrete(name = "Datas") +
labs(title = "Curva zero", subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
# show(graf)
graf <- graf %>% ggplotly() %>% style(hoverinfo = "y")
show(graf)
}
}
usuario_data()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotlyOutput
runApp()
runApp()
