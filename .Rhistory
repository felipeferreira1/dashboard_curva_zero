shiny::runApp('~/dashboard_curva0')
runApp('~/dashboard_curva0')
runApp('~/dashboard_cv')
runApp('~/dashboard_curva0')
runApp('~/dashboard_curva0')
runApp('~/dashboard_curva0')
runApp('~/dashboard_curva0')
runApp('~/dashboard_curva0')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
#Script para dados da curva zero
#Feito por: Felipe Simplício Ferreira
#última atualização: 25/05/2021
##Carregando pacotes que serão utilizados
library(tidyverse)
library(rio)
library(openxlsx)
#library(shiny)
library(ggrepel)
library(scales)
##Definindo caminho
setwd("D:/Documentos/GitHub/dashboard_curva_zero")
#Importando planilha
#Definindo as datas
datas <- import("curva_zero.xlsx", col_names = F)
datas <- datas[1,]
seleciona_datas <- seq(2,length(datas), 8)
datas_tratadas <- NA
for (i in 1:length(seleciona_datas)){
datas_tratadas[i] <- datas[1,seleciona_datas[i]]
}
datas_tratadas <- as.vector(as.character((convertToDate(datas_tratadas))))
#Coletando o resto dos dados
dados <- import("curva_zero.xlsx", skip = 5, col_names = F)
seleciona_dados <- seq(1,length(dados), 8)
for (i in 1:length(datas_tratadas)){
dados_dia <- dados[0:22,seleciona_dados[i]:(seleciona_dados[i]+4)]
names(dados_dia) <- dados_dia[1,]
dados_dia <- dados_dia[-1,] %>% mutate_all(function(x) as.numeric(as.character(x))) %>%
as.data.frame() %>% drop_na()
names(dados_dia) <- c("anos", "vertices", "real", "nominal", "implícita")
nome_arquivo <- as.character(datas_tratadas[i])
assign(nome_arquivo, dados_dia) #Nomeando arquivos
print(paste(i, length(datas_tratadas), sep = '/')) #Printa o progresso da repetição
}
#Selecionando data
usuario_data <- function(){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
opcoes_dados <- c("nominal", "real", "implícita")
while(is.element(resposta_dados, opcoes_dados) == F){
resposta_dados <- readline(prompt = "Escolha um dado (nominal, real ou implícita): ")
}
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data, datas_tratadas) == F){
print(datas_tratadas)
resposta_data <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- get(resposta_data) %>% select(anos, resposta_dados) %>% rename(!!resposta_data := resposta_dados)
graf <- ggplot(dado_graf, aes(x = anos, y = get(!!resposta_data), label = sprintf("%0.2f", round(dado_graf[,2],2)))) +
geom_line() + geom_label_repel() +
scale_x_continuous(breaks = round(seq(min(dado_graf$anos), max(dado_graf$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf[,2]), max(dado_graf[,2]), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1)) +
labs(title = paste("Curva zero", resposta_data, sep = " "), subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
show(graf)
for (i in 1:length(datas_tratadas)){
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
while(is.element(resposta_data_nova, datas_tratadas) == F){
print(datas_tratadas)
resposta_data_nova <- readline(prompt = "Escolha uma data no formato YYYY-MM-DD: ")
}
dado_graf <- merge(dado_graf, select(get(resposta_data_nova), anos, resposta_dados), by = "anos", all = T) %>%
rename(!!resposta_data_nova := resposta_dados)
dado_graf_mult <- dado_graf %>% na.omit() %>% pivot_longer(-1)
graf <- ggplot(dado_graf_mult, aes(x = anos, y = value, colour = name, label = sprintf("%0.2f", round(value,2)))) +
geom_line() + geom_label_repel() +
scale_x_continuous(breaks = round(seq(min(dado_graf_mult$anos), max(dado_graf_mult$anos), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dado_graf_mult$value), max(dado_graf_mult$value), by = 0.5),1)) +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position = "bottom") +
scale_colour_discrete(name = "Datas") +
labs(title = "Curva zero", subtitle = resposta_dados,
caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
show(graf)
}
}
usuario_data()
runApp('~/dashboard_cv')
resposta_dados <- c("nominal", "real" , "implícita")
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
View(`2021-05-28`)
View(`2021-05-28`)
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
if(is.null(input$datas) || is.null(input$dados)){return()}
if(is.null(input$datas) || is.null(input$dados)){return()}
faithful$waiting
runApp('~/dashboard_cv')
runApp()
runApp('~/dashboard_cv')
resposta_data <- reactive({
req(input$datas)
})
resposta_dados <- reactive({
req(input$dados)
})
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
#Script para dados da curva zero
#Feito por: Felipe Simplício Ferreira
#última atualização: 25/05/2021
##Carregando pacotes que serão utilizados
library(tidyverse)
library(rio)
library(openxlsx)
#library(shiny)
library(ggrepel)
library(scales)
##Definindo caminho
setwd("D:/Documentos/GitHub/dashboard_curva_zero")
#Importando planilha
#Definindo as datas
datas <- import("curva_zero.xlsx", col_names = F)
datas <- datas[1,]
seleciona_datas <- seq(2,length(datas), 8)
datas_tratadas <- NA
for (i in 1:length(seleciona_datas)){
datas_tratadas[i] <- datas[1,seleciona_datas[i]]
}
datas_tratadas <- as.vector(as.character((convertToDate(datas_tratadas))))
#Coletando o resto dos dados
dados <- import("curva_zero.xlsx", skip = 5, col_names = F)
seleciona_dados <- seq(1,length(dados), 8)
for (i in 1:length(datas_tratadas)){
dados_dia <- dados[0:22,seleciona_dados[i]:(seleciona_dados[i]+4)]
names(dados_dia) <- dados_dia[1,]
dados_dia <- dados_dia[-1,] %>% mutate_all(function(x) as.numeric(as.character(x))) %>%
as.data.frame() %>% drop_na()
names(dados_dia) <- c("anos", "vertices", "real", "nominal", "implícita")
nome_arquivo <- as.character(datas_tratadas[i])
assign(nome_arquivo, dados_dia) #Nomeando arquivos
print(paste(i, length(datas_tratadas), sep = '/')) #Printa o progresso da repetição
}
resposta_data = 2021-05-28
resposta_data = "2021-05-28"
resposta_dados = "real"
dado_graf <- get(resposta_data) %>% select(anos, resposta_dados) %>% rename(!!resposta_data := resposta_dados)
dado_graf <- get(resposta_data) %>% select(anos, all(resposta_dados) %>% rename(!!resposta_data := resposta_dados)
dado_graf <- get(resposta_data) %>% select(anos, all(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
View(dado_graf)
dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
runApp('~/dashboard_cv')
runApp()
runApp('~/dashboard_cv')
dado_graf <- reactiveValues(get(resposta_data)) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
dado_graf <- reactiveValues(get(resposta_data)) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
dado_graf <- reactiveValues(get(resposta_data))
dado_graf <- reactiveValues(resposta_data)
rlang::last_error()
View(dados)
View(`2021-05-28`)
2021-05-28
get(2021-05-28)
get("2021-05-28")
resposta_data <- reactive({
req(input$datas)
})
resposta_data <- reactive({
req(input$datas)
})
resposta_data()
rlang::last_error()
runApp('~/teste')
runApp('~/teste')
runApp('~/teste')
runApp('~/teste')
runApp('~/dashboard_cv')
?fluidPage()
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
resposta_dados
resposta_dados <- c("nominal", "real" , "implÃ­cita")
type(resposta_dados)
class(resposta_dados)
runApp('~/dashboard_cv')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(rio)
library(openxlsx)
#Importando planilha
#Definindo as datas
datas <- import("curva_zero.xlsx", col_names = F)
datas <- datas[1,]
seleciona_datas <- seq(2,length(datas), 8)
datas_tratadas <- NA
for (i in 1:length(seleciona_datas)){
datas_tratadas[i] <- datas[1,seleciona_datas[i]]
}
datas_tratadas <- as.vector(as.character((convertToDate(datas_tratadas))))
#Coletando o resto dos dados
dados <- import("curva_zero.xlsx", skip = 5, col_names = F)
seleciona_dados <- seq(1,length(dados), 8)
for (i in 1:length(datas_tratadas)){
dados_dia <- dados[0:22,seleciona_dados[i]:(seleciona_dados[i]+4)]
names(dados_dia) <- dados_dia[1,]
dados_dia <- dados_dia[-1,] %>% mutate_all(function(x) as.numeric(as.character(x))) %>%
as.data.frame() %>% drop_na()
names(dados_dia) <- c("anos", "vertices", "real", "nominal", "implicita")
nome_arquivo <- as.character(datas_tratadas[i])
assign(nome_arquivo, dados_dia) #Nomeando arquivos
print(paste(i, length(datas_tratadas), sep = '/')) #Printa o progresso
}
resposta_dados <- c("nominal", "real" , "implÃ­cita")
class(resposta_dados)
server <- function(input, output, session){
# resposta_data <- reactive({
#     req(input$datas)
# })
resposta_dados <- reactive({
req(input$dados)
})
#dado_graf <- get(resposta_data) %>% select(anos, all_of(resposta_dados)) %>% rename(!!resposta_data := resposta_dados)
# output$plot <- renderPlot({
#
#     ggplot(dado_graf, aes(x = anos, y = get(!!resposta_data), label = sprintf("%0.2f", round(dado_graf[,2],2)))) +
#     geom_line() + geom_label_repel() +
#     scale_x_continuous(breaks = round(seq(min(dado_graf$anos), max(dado_graf$anos), by = 0.5),1)) +
#     scale_y_continuous(breaks = round(seq(min(dado_graf[,2]), max(dado_graf[,2]), by = 0.5),1)) +
#     theme(axis.text.x=element_text(angle=90, hjust=1)) +
#     labs(title = paste("Curva zero", resposta_data, sep = " "), subtitle = resposta_dados,
#          caption = "Fonte: Ambima") + ylab("%") + xlab("Anos")
#         }
# )
output$txtOutput = renderText({
print(resposta_dados)
})
}
# Define UI for application
ui <- fluidPage(
h1("Nozes"),
# selectInput(inputId = "datas",
#             label = "escolha uma data",
#             choices = datas_tratadas,
#             multiple = T,
#             selectize = F),
selectInput(inputId = "dados",
label = "escolha um tipo de dado",
choices = resposta_dados,
multiple = T,
selectize = F),
mainPanel(
textOutput("txtOutput"))
#plotOutput("plot")
)
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
runApp()
runApp('~/dashboard_cv')
return(resposta_data)
return(resposta_data)
resposta_data = "2022-05-28"
return(resposta_data)
return(as.dataframe(resposta_data))
return(as.data.frame(resposta_data))
return(as_tibble(resposta_data))
a = as_tibble(resposta_data)
a
a = as_tibble(get(resposta_data))
resposta_data = "2021-05-28"
a = as_tibble(get(resposta_data))
a
?mutate
runApp('~/dashboard_cv')
runApp('~/dashboard_cv')
shiny::runApp()
